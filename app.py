### Calories Calculator App

# Import necessary libraries
from dotenv import load_dotenv  # Import load_dotenv function from dotenv module
load_dotenv()  # Load all environment variables from .env file

import streamlit as st  # Import Streamlit library and alias it as st
import os  # Import os module for interacting with the operating system
import google.generativeai as genai  # Import Google Generative AI library
from PIL import Image  # Import Image class from Pillow library

# Configure Google Generative AI with API key from environment variables
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

## Function to load Google Gemini Pro Vision API And get response
def get_gemini_response(image, prompt):
    """
    Function to interact with Google Generative AI (Gemini Pro Vision) API and get response.
    
    Parameters:
    - image (list): List containing image data in bytes.
    - prompt (str): Prompt text for the AI model.
    
    Returns:
    - str: Response text generated by the AI model.
    """
    # Initialize GenerativeModel with 'gemini-pro-vision' model
    model = genai.GenerativeModel('gemini-pro-vision')
    # Generate content using image data and prompt
    response = model.generate_content([image[0], prompt])
    return response.text

def input_image_setup(uploaded_file):
    """
    Function to prepare uploaded image file for AI model processing.
    
    Parameters:
    - uploaded_file (BytesIO): Uploaded image file in BytesIO format.
    
    Returns:
    - list: List containing dictionary with mime type and image data.
    """
    # Check if a file has been uploaded
    if uploaded_file is not None:
        # Read the file into bytes
        bytes_data = uploaded_file.getvalue()

        # Prepare image parts dictionary with mime type and image data
        image_parts = [{"mime_type": uploaded_file.type, "data": bytes_data}]
        return image_parts  # Return the list containing image parts
    else:
        raise FileNotFoundError("No file uploaded")  # Raise an error if no file is uploaded

## Initialize our Streamlit app

# Set Streamlit page configuration with a title

st.set_page_config(page_title="Calories Calculator App", layout="centered", initial_sidebar_state="expanded")


# Custom CSS styles for the app
st.markdown(
    """
    <style>
    .stApp {
        background-color: #f0f0f0;
    }
    .stButton button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s;
    }
    .stButton button:hover {
        background-color: #45a049;
    }
    .stTextInput input {
        border-radius: 5px;
        padding: 10px;
        border: 1px solid #ccc;
    }
    .stFileUploader label {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s;
    }
    .stFileUploader label:hover {
        background-color: #45a049;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Main content area with Streamlit
st.title("Calories Calculator App")  # Display title for the app
st.markdown("---")  # Horizontal rule for separation

# File uploader to allow user to choose an image (JPEG, PNG)
uploaded_file = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"], key="fileuploader")

# Create a container for the main content using Streamlit's columns
col1, col2 = st.columns([1, 3])

# If an image file is uploaded, open and display it using Streamlit's st.image function
if uploaded_file is not None:
    image = Image.open(uploaded_file)  # Open the uploaded image file
    col1.image(image, caption="Uploaded Image", use_column_width=True)  # Display the image in the first column

# Display information and instructions in the second column
with col2:
    st.subheader("Instructions:")
    st.markdown("""
    - Upload an image of food items.
    - Click the button below to analyze and get calorie details.
    """)

    st.subheader("Example Prompt:")
    input_prompt = st.text_area("Prompt", value="Identify food items and calculate total calories...", height=150)

# Create a submit button to trigger the action
submit = st.button("Analyze Image", key="analyze_button", help="Click to analyze the uploaded image and get calorie details")

## If submit button is clicked
if submit and uploaded_file is not None:
    try:
        # Setup image data for the AI model
        image_data = input_image_setup(uploaded_file)
        # Get response from the AI model using image data and prompt
        response = get_gemini_response(image_data, input_prompt)
        # Display the response as a subheader and text using Streamlit's st.subheader and st.markdown functions
        st.subheader("Analysis Result:")
        st.markdown(f"```{response}```")
    except FileNotFoundError as e:
        st.error(f"Error: {e}")
elif submit and uploaded_file is None:
    st.warning("Please upload an image first.")
